//
//  AddTransportDetailsView.swift
//  Travel
//
//  Created by Gaurav Bhambhani on 11/16/24.
//

import SwiftUI

struct AddTransportDetailsView: View {
    
    @Environment(\.dismiss) var dismiss
    
    @ObservedObject var transportViewModel: TransportViewModel
    
    @State private var type = ""
    @State private var company_name = ""
    @State private var departure_time = Date()
    @State private var arrival_time = Date()
    @State private var price = ""
    
    @State private var showingAlert = false
    @State private var alertMessage = ""
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Transport Details")) {
                    TextField("Type", text: $type)
                    
                    TextField("Company Name", text: $company_name)
                    
                    DatePicker("Departure Time", selection: $departure_time, displayedComponents: [.date, .hourAndMinute])
                    
                    DatePicker("Arrival Time", selection: $arrival_time, displayedComponents: [.date, .hourAndMinute])
                        .onChange(of: arrival_time) { newValue in
                            if newValue < departure_time {
                                arrival_time = departure_time
                                alertMessage = "Arrival time cannot be earlier than departure time."
                                showingAlert = true
                            }
                        }
                    
                    TextField("Price", text: $price)
                        .keyboardType(.decimalPad)
                }
            }
            .navigationTitle("Add Transport")
            .toolbar {
                ToolbarItem(placement: .confirmationAction) {
                    Button("Save") {
                        saveTransport()
                    }
                }
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
            }
            .alert(isPresented: $showingAlert) {
                Alert(
                    title: Text("Invalid Input"),
                    message: Text(alertMessage),
                    dismissButton: .default(Text("OK"))
                )
            }
        }
    }
    
    private func saveTransport() {
        guard !type.isEmpty else {
            alertMessage = "Transport type is required."
            showingAlert = true
            return
        }
        
        guard let priceValue = Float(price), priceValue >= 0 else {
            alertMessage = "Please enter a valid price greater than or equal to 0."
            showingAlert = true
            return
        }
        
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm"
        let formattedDepartureTime = dateFormatter.string(from: departure_time)
        let formattedArrivalTime = dateFormatter.string(from: arrival_time)
        
        let newTransport = Transport(
            transport_id: 0, // Assuming ID is auto-generated by the database
            type: type,
            company_name: company_name,
            departure_time: formattedDepartureTime,
            arrival_time: formattedArrivalTime,
            price: priceValue
        )
        
        transportViewModel.addTransport(newTransport)
        dismiss()
    }
}

#Preview {
    AddTransportDetailsView(transportViewModel: TransportViewModel())
}
